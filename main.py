from telethon import TelegramClient, events, types
import asyncio
import os

BOT_TOKEN = os.getenv('BOT_TOKEN')
CHAT_USERNAME = os.getenv('CHAT_USERNAME')
API_ID = os.getenv('API_ID')
API_HASH = os.getenv('API_HASH')
CHANNEL_USERNAME = os.getenv('CHANNEL_USERNAME')

TARGET_CHAT_ID = None

bot = TelegramClient('bot_session', API_ID, API_HASH, device_model="Web")
user = TelegramClient('user_session', API_ID, API_HASH, device_model="Web")
keywords = ["–≤–∏–¥–µ–æ–∫–∞—Ä—Ç", "–±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è", "–±–ª–æ–∫–∏ –ø–∏—Ç–∞–Ω–∏—è"]

@bot.on(events.NewMessage(pattern='/keywords'))
async def keywords_handler(event):
    sender = await event.get_sender()

    if sender.username != CHAT_USERNAME:
        await event.respond("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        print(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{sender.username}")
        return

    keywords_text = "\n".join([f"‚Ä¢ {keyword}" for keyword in keywords])
    await event.respond(
        "üìù –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:\n\n"
        f"{keywords_text}\n\n"
        "–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —ç—Ç–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞."
    )
    print(f"–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{sender.username}")

@user.on(events.NewMessage(chats=CHANNEL_USERNAME))
async def new_message_handler(event):
    message = event.message
    print(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ: {message.text}")

    if TARGET_CHAT_ID and message.text and any(keyword in message.text.lower() for keyword in keywords):
        channel = await user.get_entity(message.peer_id)
        forward_message = await user.get_messages(channel, ids=[message.id])
        bot_channel = await bot.get_entity(CHANNEL_USERNAME)
        await bot.forward_messages(TARGET_CHAT_ID, forward_message[0], from_peer=bot_channel)
        matched_keywords = [k for k in keywords if k in message.text.lower()]
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º '{', '.join(matched_keywords)}' –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ —á–∞—Ç {TARGET_CHAT_ID}")

@bot.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    sender = await event.get_sender()

    if sender.username != CHAT_USERNAME:
        await event.respond("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        print(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{sender.username}")
        return
    
    global TARGET_CHAT_ID
    TARGET_CHAT_ID = event.chat_id
    
    keyboard = [[types.KeyboardButton(text='/keywords')]]
    
    await event.respond(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞.\n\n"
        f"–Ø –±—É–¥—É –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ @{CHANNEL_USERNAME} "
        "–ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è! üöÄ\n\n"
        "–ù–∞–∂–º–∏—Ç–µ /keywords —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤",
        buttons=keyboard
    )

    print(f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{sender.username}")
async def main():
    try:
        print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await bot.start(bot_token=BOT_TOKEN)

        print("–ó–∞–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        await user.start()

        if not await user.is_user_authorized():
            print("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ –∫–æ–Ω—Å–æ–ª–∏.")
            await user.send_code_request(phone=input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "))
            await user.sign_in(code=input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: "))
        
        print("–°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!")
        await asyncio.gather(
            bot.run_until_disconnected(),
            user.run_until_disconnected(),
            return_exceptions=True
        )
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.disconnect()
        await user.disconnect()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        pass
    finally:
        loop.close()
